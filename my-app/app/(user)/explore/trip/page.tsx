// 'use client'

// import Head from 'next/head'
// import axios from 'axios'
// import { SetStateAction, JSXElementConstructor, PromiseLikeOfReactNode, ReactElement, ReactNode, ReactPortal, useState } from 'react'

//   export default async function Page() {
//     const [query, setQuery] = useState('');

//       const res = await fetch('https://maps.googleapis.com/maps/api/place/details/json?place_id=ChIJzwxgI7C0AjERShi5dyiRcJI&key=AIzaSyD9YrY4EzXon6_8L-AdvEhYcV2uh_GdFxs')
//       const data = await res.json()
      
//     // set the value of our useState query anytime the user types on our input
//     const handleChange = (e: { target: { value: SetStateAction<string> } }) => {
//     setQuery(e.target.value)
//     }
    
//     return (
//     <div className={`font-nunito bg-gray-100`}>
//     <Head>
//     <title>Rest Countries</title>
//     <meta name="description" content="Generated by create next app" />
//     <link rel="icon" href="/favicon.ico" />
//     </Head>
//     <div className='w-11/12 m-auto mt-40 flex flex-col md:flex-row justify-between items-start md:items-center gap-5 md:gap-0'>
//     <input onChange={handleChange} type='text'/>
//     </div>
    
//     <div className='w-11/12 m-auto md:grid mt-10 gap-10 md:grid-cols-4 flex flex-col'>
//      /* here we map over the element and display each item as a card  */
//     {data?.map((data: { flags: { png: string | undefined }; name: { common: string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | PromiseLikeOfReactNode | null | undefined }; population: string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | PromiseLikeOfReactNode | null | undefined; region: string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | PromiseLikeOfReactNode | null | undefined; capital: string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | PromiseLikeOfReactNode | null | undefined }) => (
//     <div className='bg-white shadow-lg rounded-md overflow-hidden h-[25rem] cursor-pointer'>
//     <img src={data.photos} alt='Country card' className='h-56 w-full object-cover'/>
//     <span className='px-3 py-2 block font-bold text-xl'>{data.longname}</span>
//     <span className='px-3 py-2 block'><span className='font-bold'>Popoulation:</span> <span className='font-light'>{data.population}</span></span>
//     <span className='px-3 py-2 block'><span className='font-bold'>Region:</span> <span className='font-light'>{data.region}</span></span>
//     <span className='px-3 py-2 block'><span className='font-bold'>Capital:</span> <span className='font-light'>{data.capital}</span></span>
//     </div>
//     ))}
//     </div>
//     </div>
//     )
//     }


// import Head from 'next/head'
// // import axios from 'axios'
// // import { SetStateAction, JSXElementConstructor, PromiseLikeOfReactNode, ReactElement, ReactNode, ReactPortal, useState, Key } from 'react'
// import { FaUserCircle } from 'react-icons/fa'
// import { PiDotsThreeCircleFill } from 'react-icons/pi'
// import { promises as fs } from 'fs';

// export default async function Page() {

//       const res = await fetch('https://maps.googleapis.com/maps/api/place/details/json?place_id=ChIJzwxgI7C0AjERShi5dyiRcJI&key=AIzaSyD9YrY4EzXon6_8L-AdvEhYcV2uh_GdFxs')
//       const datas:any = await res.json()

//   return (
//   <div className={`font-nunito bg-gray-100`}>
//   <div className='w-11/12 m-auto mt-40 flex flex-col md:flex-row justify-between items-start md:items-center gap-5 md:gap-0'>
//   </div>
  
//     <div className={`font-nunito bg-gray-100`}>
//     {datas.result.name}
//   </div>
//   </div>
//   )
//   }
'use client'
import useSWR from 'swr'

import React, { useState, useEffect } from 'react';

const fetcher = (url : string) => fetch(url).then(r => r.json())

export default function Page() {
  const { data, error, isLoading } = useSWR('/api/placedetail', fetcher)
  if (error) return <div>failed to load</div>
  if (isLoading) return <div>loading...</div>
  return (
    <div className={`font-nunito bg-gray-100`}>
      <div className='w-11/12 m-auto mt-40 flex flex-col md:flex-row justify-between items-start md:items-center gap-5 md:gap-0'>
      </div>
      <div className={`font-nunito bg-gray-100`}>
        hello {data.data.result.name}
      </div>
</div>
);
}



